%% This BibTeX bibliography file was created using BibDesk.
%% https://bibdesk.sourceforge.io/

%% Created for Josh Ko at 2024-01-18 15:46:39 +0800 


%% Saved with string encoding Unicode (UTF-8) 



@article{Wells1999,
	abstract = {Girard and Reynolds independently invented System F
                   (a.k.a. the second-order polymorphically typed lambda
                   calculus) to handle problems in logic and computer
                   programming language design, respectively. Viewing F
                   in the Curry style, which associates types with
                   untyped lambda terms, raises the questions of
                   typability and type checking. Typability asks for a
                   term whether there exists some type it can be given.
                   Type checking asks, for a particular term and type,
                   whether the term can be given that type. The
                   decidability of these problems has been settled for
                   restrictions and extensions of F and related systems
                   and complexity lower-bounds have been determined for
                   typability in F, but this report is the first to
                   resolve whether these problems are decidable for
                   System F. This report proves that type checking in F
                   is undecidable, by a reduction from semi-unification,
                   and that typability in F is undecidable, by a
                   reduction from type checking. Because there is an
                   easy reduction from typability to type checking, the
                   two problems are equivalent. The reduction from type
                   checking to typability uses a novel method of
                   constructing lambda terms that simulate arbitrarily
                   chosen type environments. All of the results also
                   hold for the λI-calculus. {\copyright} 1999
                   Published by Elsevier Science B.V. All rights
                   reserved.},
	author = {Wells, Joe B.},
	date-modified = {2024-01-18 15:45:54 +0800},
	doi = {10.1016/S0168-0072(98)00047-5},
	journal = {Annals of Pure and Applied Logic},
	number = {1--3},
	pages = {111--156},
	title = {Typability and type checking in {System F} are equivalent and undecidable},
	volume = {98},
	year = {1999},
	bdsk-url-1 = {https://doi.org/10.1016/S0168-0072(98)00047-5}}

@inproceedings{Dowek1993,
	abstract = {The set of pure terms which are typable in the
                   $\lambda$II-calculus in a given context is not
                   recursive. So there is no general type inference
                   algorithm for the programming language Elf and, in
                   some cases, some type information has to be mentioned
                   by the programmer.},
	author = {Dowek, Gilles},
	booktitle = {International Conference on Typed Lambda Calculi and Applications (TLCA)},
	date-modified = {2024-01-18 15:24:53 +0800},
	doi = {10.1007/BFb0037103},
	pages = {139--145},
	publisher = {Springer},
	series = {Lecture Notes in Computer Science},
	title = {The undecidability of typability in the Lambda-Pi-calculus},
	volume = {664},
	year = {1993},
	bdsk-url-1 = {https://doi.org/10.1007/BFb0037103}}

@article{Dunfield2021,
	abstract = {Bidirectional typing combines two modes of typing:
                   type checking, which checks that a program satisfies
                   a known type, and type synthesis, which determines a
                   type from the program. Using checking enables
                   bidirectional typing to support features for which
                   inference is undecidable; using synthesis enables
                   bidirectional typing to avoid the large annotation
                   burden of explicitly typed languages. In addition,
                   bidirectional typing improves error locality. We
                   highlight the design principles that underlie
                   bidirectional type systems, survey the development of
                   bidirectional typing from the prehistoric period
                   before Pierce and Turner's local type inference to
                   the present day, and provide guidance for future
                   investigations.},
	author = {Dunfield, Jana and Krishnaswami, Neel},
	date-modified = {2024-01-18 15:25:32 +0800},
	doi = {10.1145/3450952},
	journal = {ACM Computing Surveys},
	number = {5},
	pages = {98:1--38},
	title = {Bidirectional typing},
	volume = {54},
	year = {2021},
	bdsk-url-1 = {https://doi.org/10.1145/3450952}}

@book{Wadler2022,
	author = {Wadler, Philip and Kokke, Wen and Siek, Jeremy G.},
	date-modified = {2024-01-18 15:45:15 +0800},
	title = {Programming Language Foundations in \textsc{Agda}},
	url = {https://plfa.inf.ed.ac.uk/22.08/},
	year = {2022},
	bdsk-url-1 = {https://plfa.inf.ed.ac.uk/22.08/}}

@article{Pierce2000,
	abstract = {We study two partial type inference methods for a
                   language combining subtyping and impredicative
                   polymorphism. Both methods are local in the sense
                   that missing annotations are recovered using only
                   information from adjacent nodes in the syntax tree,
                   without long-distance constraints such as unification
                   variables. One method infers type arguments in
                   polymorphic applications using a local constraint
                   solver. The other infers annotations on bound
                   variables in function abstractions by propagating
                   type constraints downward from enclosing application
                   nodes. We motivate our design choices by a
                   statistical analysis of the uses of type inference in
                   a sizable body of existing ML code.},
	author = {Pierce, Benjamin C. and Turner, David N.},
	date-modified = {2024-01-18 15:36:14 +0800},
	doi = {10.1145/345099.345100},
	journal = {ACM Transactions on Programming Languages and Systems},
	number = {1},
	pages = {1--44},
	title = {Local type inference},
	volume = {22},
	year = {2000},
	bdsk-url-1 = {https://doi.org/10.1145/345099.345100}}

@misc{Aczel1978,
	author = {Aczel, Peter},
	date-modified = {2024-01-18 15:20:31 +0800},
	title = {A general {Church}--{Rosser} theorem},
	url = {http://www.ens-lyon.fr/LIP/REWRITING/MISC/AGeneralChurch-RosserTheorem.pdf},
	year = {1978},
	bdsk-url-1 = {http://www.ens-lyon.fr/LIP/REWRITING/MISC/AGeneralChurch-RosserTheorem.pdf}}

@book{UFP2013,
	author = {{Univalent Foundations Program}, The},
	date-modified = {2024-01-18 15:43:09 +0800},
	publisher = {Institute for Advanced Study},
	title = {Homotopy Type Theory: Univalent Foundations of Mathematics},
	url = {https://homotopytypetheory.org/book},
	year = {2013}}

@article{McBride2003,
	author = {McBride, Conor},
	date-modified = {2024-01-18 15:34:26 +0800},
	doi = {10.1017/S0956796803004957},
	journal = {Journal of Functional Programming},
	number = {6},
	pages = {1061--1075},
	title = {First-order unification by structural recursion},
	volume = {13},
	year = {2003},
	bdsk-url-1 = {https://doi.org/10.1017/S0956796803004957}}

@misc{McBride2003a,
	author = {McBride, Conor},
	date-modified = {2024-01-18 15:34:51 +0800},
	title = {First-order unification by structural recursion: correctness proof},
	url = {http://www.strictlypositive.org/foubsr-website/},
	year = {2003},
	bdsk-url-1 = {http://www.strictlypositive.org/foubsr-website/}}

@inproceedings{Moggi1989,
	author = {Moggi, Eugenio},
	booktitle = {Symposium on Logic in Computer Science (LICS)},
	date-modified = {2024-01-18 15:35:30 +0800},
	doi = {10.1109/LICS.1989.39155},
	pages = {14--23},
	publisher = {IEEE},
	title = {Computational lambda-calculus and monads},
	year = {1989},
	bdsk-url-1 = {https://doi.org/10.1109/LICS.1989.39155}}

@article{Harper1993a,
	abstract = {The Edinburgh Logical Framework (LF) provides a means
                   to define (or present) logics. It is based on a
                   general treatment of syntax, rules, and proofs by
                   means of a typed λ-calculus with dependent types.
                   Syntax is treated in a style similar to, but more
                   general than, Martin-Lo¨f's system of arities. The
                   treatment of rules and proofs focuses on his notion
                   of a judgment. Logics are represented in LF via a new
                   principle, the judgments as types principle, whereby
                   each judgment is identified with the type of its
                   proofs. This allows for a smooth treatment of
                   discharge and variable occurence conditions and leads
                   to a uniform treatment of rules and proofs whereby
                   rules are viewed as proofs of higher-order judgments
                   and proof checking is reduced to type checking. The
                   practical benefit of our treatment of formal systems
                   is that logic-independent tools, such as proof
                   editors and proof checkers, can be constructed.},
	author = {Harper, Robert and Honsell, Furio and Plotkin, Gordon},
	date-modified = {2024-01-18 15:31:22 +0800},
	doi = {10.1145/138027.138060},
	journal = {Journal of the ACM},
	number = {1},
	pages = {143--184},
	title = {A Framework for Defining Logics},
	volume = {40},
	year = {1993},
	bdsk-url-1 = {https://doi.org/10.1145/138027.138060}}

@article{Harper2007,
	author = {Harper, Robert and Licata, Daniel R.},
	date-modified = {2024-01-18 15:32:21 +0800},
	doi = {10.1017/S0956796807006430},
	journal = {Journal of Functional Programming},
	number = {4--5},
	pages = {613--673},
	title = {Mechanizing metatheory in a logical framework},
	volume = {17},
	year = {2007},
	bdsk-url-1 = {https://doi.org/10.1017/S0956796807006430}}

@misc{Assaf2016,
	author = {Assaf, Ali and Burel, Guillaume and Cauderlier, Rapha{\"e}l and Delahaye, David and Dowek, Gilles and Dubois, Catherine and Gilbert, Fr{\'e}d{\'e}ric and Halmagrand, Pierre and Hermant, Olivier and Saillard, Ronan},
	date-modified = {2024-01-18 15:18:17 +0800},
	doi = {10.48550/arXiv.2311.07185},
	title = {{Dedukti}: a logical framework based on the {$\lambda\Pi$-Calculus Modulo Theory}},
	year = {2023},
	bdsk-url-1 = {https://arxiv.org/abs/2311.07185}}

@misc{Felicissimo2023,
	author = {Felicissimo, Thiago},
	doi = {10.48550/arXiv.2307.08523},
	title = {Generic bidirectional typing for dependent type theories},
	year = {2023},
	bdsk-url-1 = {https://doi.org/10.48550/arXiv.2307.08523}}

@misc{Bauer2020,
	author = {Bauer, Andrej and Haselwarter, Philipp G. and Lumsdaine, Peter LeFanu},
	doi = {10.48550/arXiv.2009.05539},
	title = {A general definition of dependent type theories},
	year = {2020},
	bdsk-url-1 = {https://doi.org/10.48550/arXiv.2009.05539}}

@misc{Haselwarter2021,
	author = {Haselwarter, Philipp G. and Bauer, Andrej},
	date-modified = {2024-01-18 15:33:07 +0800},
	doi = {10.48550/arXiv.2112.00539},
	title = {Finitary type theories with and without contexts},
	year = {2021},
	bdsk-url-1 = {https://arxiv.org/abs/2112.00539}}

@article{Bauer2022a,
	author = {Bauer, Andrej and Komel, Anja Petkovi{\'c}},
	date-modified = {2024-01-18 15:23:08 +0800},
	doi = {10.46298/lmcs-18(1:17)2022},
	journal = {Logical Methods in Computer Science},
	number = {1},
	pages = {17:1--42},
	title = {An extensible equality checking algorithm for dependent type theories},
	volume = {18},
	year = {2022},
	bdsk-url-1 = {https://doi.org/10.46298/lmcs-18(1:17)2022}}

@phdthesis{Uemura2021,
	abstract = {In this thesis, we study abstract and concrete type
                   theories. We introduce an abstract notion of a type
                   theory to obtain general results in the semantics of
                   type theories, but we also provide a syntactic way of
                   presenting a type theory to allow us a further
                   investigation into a concrete type theory to obtain
                   consistency and independence results.},
	author = {Uemura, Taichi},
	date-modified = {2024-01-18 15:39:57 +0800},
	school = {University of Amsterdam},
	title = {Abstract and Concrete Type Theories},
	url = {https://hdl.handle.net/11245.1/41ff0b60-64d4-4003-8182-c244a9afab3b},
	year = {2021},
	bdsk-url-1 = {https://hdl.handle.net/11245.1/41ff0b60-64d4-4003-8182-%20c244a9afab3b}}

@inproceedings{Fiore1999,
	author = {Fiore, Marcelo P. and Plotkin, Gordon D. and Turi, Daniele},
	booktitle = {Symposium on Logic in Computer Science (LICS)},
	date-modified = {2024-01-18 15:28:31 +0800},
	doi = {10.1109/LICS.1999.782615},
	pages = {193--202},
	publisher = {IEEE},
	title = {Abstract syntax and variable binding},
	year = {1999},
	bdsk-url-1 = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?%20arnumber=782615},
	bdsk-url-2 = {https://doi.org/10.1109/LICS.1999.782615}}

@article{Tanaka2006,
	author = {Tanaka, Miki and Power, A. John},
	date-modified = {2024-01-18 15:36:45 +0800},
	doi = {10.1007/s10990-006-8750-x},
	journal = {Higher-Order and Symbolic Computation},
	number = {2--3},
	pages = {305--337},
	title = {Pseudo-distributive laws and axiomatics for variable binding},
	volume = {19},
	year = {2006},
	bdsk-url-1 = {http://link.springer.com/10.1007/s10990-006-8750-x},
	bdsk-url-2 = {https://doi.org/10.1007/s10990-006-8750-x}}

@article{Tanaka2006a,
	abstract = {{Generalizing Fiore et al.'s use of the category 𝔽
                   of finite sets to model untyped Cartesian contexts
                   and Tanaka's use of the category ℙ of permutations
                   to model untyped linear contexts, we let S be an
                   arbitrary pseudo-monad on Cat and let S1 model
                   untyped contexts in general: this generality includes
                   contexts for sub-structural logics such as the Logic
                   of Bunched Implications and variants. Given a
                   pseudo-distributive law of S over the (partial)
                   pseudo-monad for free cocompletions, we define a
                   canonical substitution monoidal structure on the
                   category [(S1)op, Set], generalizing substitution
                   monoidal structures for Cartesian and linear contexts
                   and providing a natural substitution structure for
                   Bunched Implications and its variants. We give a
                   concrete description of the substitution monoidal
                   structure. We then give an axiomatic definition of a
                   binding signature, again extending the definitions
                   for Cartesian and linear contexts. We investigate
                   examples in detail, then prove the central result of
                   the paper, yielding initial algebra semantics for
                   binding signatures at the level of generality we
                   propose.}},
	author = {Tanaka, Miki and Power, John},
	date-modified = {2024-01-18 15:37:15 +0800},
	doi = {10.1093/logcom/exi070},
	journal = {Journal of Logic and Computation},
	number = {1},
	pages = {5--25},
	title = {A Unified Category-theoretic Semantics for Binding Signatures in Substructural Logic},
	volume = {16},
	year = {2006},
	bdsk-url-1 = {https://doi.org/10.1093/logcom/exi070}}

@inproceedings{Fiore2010,
	abstract = {We extend universal algebra and its equational logic
                   from first to second order as follows.},
	author = {Fiore, Marcelo and Hur, Chung-Kil},
	booktitle = {International Workshop on Computer Science Logic (CSL)},
	date-modified = {2024-01-18 15:27:02 +0800},
	doi = {10.1007/978-3-642-15205-4_26},
	pages = {320--335},
	publisher = {Springer},
	series = {Lecture Notes in Computer Science},
	title = {Second-order equational logic (extended abstract)},
	volume = {6247},
	year = {2010},
	bdsk-url-1 = {https://doi.org/10.1007/978-3-642-15205-4_26}}

@inproceedings{Hamana2011,
	author = {Hamana, Makoto},
	booktitle = {International Conference on Foundations of Software Science and Computational Structures (FoSSaCS)},
	date-modified = {2024-01-18 15:29:43 +0800},
	doi = {10.1007/978-3-642-19805-2_26},
	pages = {381--395},
	publisher = {Springer},
	series = {Lecture Notes in Computer Science},
	title = {Polymorphic abstract syntax via {Grothendieck} construction},
	volume = {6604},
	year = {2011},
	bdsk-url-1 = {https://doi.org/10.1007/978-3-642-19805-2_26}}

@inproceedings{Fiore2013,
	author = {Fiore, Marcelo and Hamana, Makoto},
	booktitle = {Symposium on Logic in Computer Science (LICS)},
	date-modified = {2024-01-18 15:26:11 +0800},
	doi = {10.1109/LICS.2013.59},
	pages = {520--529},
	publisher = {IEEE},
	title = {Multiversal polymorphic algebraic theories: syntax, semantics, translations, and equational Logic},
	year = {2013},
	bdsk-url-1 = {https://doi.org/10.1109/LICS.2013.59}}

@inproceedings{Arkor2020,
	abstract = {We develop algebraic models of simple type theories,
                   laying out a framework that extends universal algebra
                   to incorporate both algebraic sorting and variable
                   binding. Examples of simple type theories include the
                   unityped and simply-typed λ-calculi, the
                   computational λ-calculus, and predicate logic.Simple
                   type theories are given models in presheaf
                   categories, with structure specified by algebras of
                   polynomial endofunctors that correspond to natural
                   deduction rules. Initial models, which we construct,
                   abstractly describe the syntax of simple type
                   theories. Taking substitution structure into
                   consideration, we further provide sound and complete
                   semantics in structured cartesian multicategories.
                   This development generalises Lambek's correspondence
                   between the simply-typed λ-calculus and
                   cartesian-closed categories, to arbitrary simple type
                   theories.},
	author = {Arkor, Nathanael and Fiore, Marcelo},
	booktitle = {Symposium on Logic in Computer Science (LICS)},
	date-modified = {2024-01-18 15:16:54 +0800},
	doi = {10.1145/3373718.3394771},
	pages = {88--101},
	publisher = {ACM},
	title = {Algebraic models of simple type theories: a polynomial approach},
	year = {2020},
	bdsk-url-1 = {https://doi.org/10.1145/3373718.3394771}}

@article{Fiore2022,
	abstract = {Despite extensive research both on the theoretical
                   and practical fronts, formalising, reasoning about,
                   and implementing languages with variable binding is
                   still a daunting endeavour -- repetitive boilerplate
                   and the overly complicated metatheory of
                   capture-avoiding substitution often get in the way of
                   progressing on to the actually interesting properties
                   of a language. Existing developments offer some
                   relief, however at the expense of inconvenient and
                   error-prone term encodings and lack of formal
                   foundations.},
	author = {Fiore, Marcelo and Szamozvancev, Dmitrij},
	date-modified = {2024-01-18 15:27:58 +0800},
	doi = {10.1145/3498715},
	journal = {Proceedings of the ACM on Programming Languages},
	number = {POPL},
	pages = {53:1--29},
	title = {Formal metatheory of second-order abstract syntax},
	volume = {6},
	year = {2022},
	bdsk-url-1 = {https://doi.org/10.1145/3498715}}

@inproceedings{Wood2022,
	abstract = {Mechanisation of programming language research is of
                   growing interest, and the act of mechanising type
                   systems and their metatheory is generally becoming
                   easier as new techniques are invented. However,
                   state-of-the-art techniques mostly rely on
                   structurality of the type system --- that weakening,
                   contraction, and exchange are admissible and
                   variables can be used unrestrictedly once assumed.
                   Linear logic, and many related subsequent systems,
                   provide motivations for breaking some of these
                   assumptions.},
	author = {Wood, James and Atkey, Robert},
	booktitle = {European Symposium on Programming (ESOP)},
	date-modified = {2024-01-18 15:46:38 +0800},
	doi = {10.1007/978-3-030-99336-8_14},
	pages = {376--402},
	publisher = {Springer},
	series = {Lecture Notes in Computer Science},
	title = {A Framework for Substructural Type Systems},
	volume = {13240},
	year = {2022},
	bdsk-url-1 = {https://doi.org/10.1007/978-3-030-99336-8_14}}

@article{Allais2021,
	abstract = {The syntax of almost every programming language
                   includes a notion of binder and corresponding bound
                   occurrences, along with the accompanying notions of
                   α-equivalence, capture-avoiding substitution, typing
                   contexts, runtime environments, and so on. In the
                   past, implementing and reasoning about programming
                   languages required careful handling to maintain the
                   correct behaviour of bound variables. Modern
                   programming languages include features that enable
                   constraints like scope safety to be expressed in
                   types. Nevertheless, the programmer is still forced
                   to write the same boilerplate over again for each new
                   implementation of a scope-safe operation (e.g.,
                   renaming, substitution, desugaring, printing), and
                   then again for correctness proofs. We present an
                   expressive universe of syntaxes with binding and
                   demonstrate how to (1) implement scope-safe
                   traversals once and for all by generic programming;
                   and (2) how to derive properties of these traversals
                   by generic proving. Our universe description, generic
                   traversals and proofs, and our examples have all been
                   formalised in Agda and are available in the
                   accompanying material available online at
                   https://github.com/gallais/generic-syntax .},
	author = {Allais, Guillaume and Atkey, Robert and Chapman, James and McBride, Conor and McKinna, James},
	date-modified = {2024-01-18 15:16:19 +0800},
	doi = {10.1017/S0956796820000076},
	journal = {Journal of Functional Programming},
	pages = {e22:1--55},
	title = {A type- and scope-safe universe of syntaxes with binding: their semantics and proofs},
	volume = {31},
	year = {2021},
	bdsk-url-1 = {https://doi.org/10.1017/S0956796820000076}}

@article{Leivant1986,
	abstract = {We use a perception of second-order typing in the
                   λ-Calculus, as conveying semantic properties of
                   expressions in models over λ-expressions, to exhibit
                   natural and uniform proofs of theorems of Girard
                   (1971/1972) and of Coppo, Dezani and Veneri (1981)
                   about the relations between typing properties and
                   computational properties of λ-expressions
                   (solvability, normalizability, strong
                   normalizability), and of some generalizations of
                   these theorems.},
	author = {Leivant, Daniel},
	date-modified = {2024-01-18 15:34:08 +0800},
	doi = {10.1016/0304-3975(86)90109-X},
	journal = {Theoretical Computer Science},
	pages = {51--68},
	title = {Typing and computational properties of lambda expressions},
	volume = {44},
	year = {1986},
	bdsk-url-1 = {https://doi.org/10.1016/0304-3975(86)90109-X}}

@misc{Chen2024a,
	author = {Chen, Liang-Ting and Hsiang-Shang Ko},
	doi = {10.5281/zenodo.10458840},
	title = {A formal treatment of bidirectional typing (Artefact)},
	year = {2024},
	bdsk-url-1 = {https://doi.org/10.5281/zenodo.10458840}}

@inproceedings{Ahrens2022,
	author = {Ahrens, Benedikt and Matthes, Ralph and M\"{o}rtberg, Anders},
	booktitle = {International Conference on Certified Programs and Proofs (CPP)},
	date-modified = {2024-01-18 15:13:12 +0800},
	doi = {10.1145/3497775.3503678},
	numpages = {17},
	pages = {307--323},
	publisher = {ACM},
	title = {Implementing a category-theoretic framework for typed abstract syntax},
	year = {2022},
	bdsk-url-1 = {https://doi.org/10.1145/3497775.3503678}}
